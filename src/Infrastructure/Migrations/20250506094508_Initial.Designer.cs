// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleLibrary.Infrastructure;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(LibraryEFContext))]
    [Migration("20250506094508_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f88f264-dfa0-4bc6-9607-40b03521b9bc"),
                            Description = "",
                            FirstName = "N/A",
                            LastName = "N/A",
                            Tags = ""
                        },
                        new
                        {
                            Id = new Guid("6ace67f1-9b06-4f5c-9f68-405a605a1c0e"),
                            BornDate = new DateTime(1798, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FirstName = "Adam",
                            LastName = "Mickiewicz",
                            Tags = ""
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f34097e4-661e-4f9c-bdfe-779aeb8d015a"),
                            AuthorId = new Guid("3f88f264-dfa0-4bc6-9607-40b03521b9bc"),
                            CategoryId = new Guid("e1ccab71-6e92-47d8-99bb-823b2560ecf6"),
                            Description = "",
                            Language = 0,
                            ReleaseDate = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Some old book"
                        },
                        new
                        {
                            Id = new Guid("2f5464b2-372c-4b66-9532-a53b6c237ed7"),
                            AuthorId = new Guid("3f88f264-dfa0-4bc6-9607-40b03521b9bc"),
                            CategoryId = new Guid("e1ccab71-6e92-47d8-99bb-823b2560ecf6"),
                            Description = "",
                            Language = 2,
                            ReleaseDate = new DateTime(1800, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Some old German book"
                        },
                        new
                        {
                            Id = new Guid("5ea7045e-1803-4c3f-bf63-c114944efef2"),
                            AuthorId = new Guid("3f88f264-dfa0-4bc6-9607-40b03521b9bc"),
                            CategoryId = new Guid("cde2affa-c16b-442a-8c0f-10b2d6b509c2"),
                            Description = "",
                            Language = 3,
                            ReleaseDate = new DateTime(2010, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Some new French book"
                        },
                        new
                        {
                            Id = new Guid("9d2e7356-11db-4d1b-a675-0a93589cd5bc"),
                            AuthorId = new Guid("6ace67f1-9b06-4f5c-9f68-405a605a1c0e"),
                            CategoryId = new Guid("cde2affa-c16b-442a-8c0f-10b2d6b509c2"),
                            Description = "",
                            Language = 1,
                            ReleaseDate = new DateTime(1823, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Dziady część II"
                        },
                        new
                        {
                            Id = new Guid("51588acb-2b57-42d1-a671-db18f4e80ffc"),
                            AuthorId = new Guid("6ace67f1-9b06-4f5c-9f68-405a605a1c0e"),
                            CategoryId = new Guid("cde2affa-c16b-442a-8c0f-10b2d6b509c2"),
                            Description = "",
                            Language = 1,
                            ReleaseDate = new DateTime(1832, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Dziady część III"
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Borrowing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CopyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CopyId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Borrowings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f3c6aab-ac54-460e-9f69-09fcd287817b"),
                            CopyId = new Guid("ab49f46b-8f17-4a02-81fb-5a652d12e4aa"),
                            ReaderId = new Guid("c958d750-b4f4-41bc-aaa2-9f81406534c0"),
                            StartedDate = new DateTime(2022, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("beb3838f-e839-469d-9b4f-26601d946aa2"),
                            CopyId = new Guid("5a529b05-cb46-4eb1-ac5e-658642577afc"),
                            ReaderId = new Guid("c958d750-b4f4-41bc-aaa2-9f81406534c0"),
                            StartedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7955e404-9090-41c5-9505-cb73884a35ec"),
                            CopyId = new Guid("a4e0e85d-1481-4911-93b7-464bbc2d835a"),
                            ReaderId = new Guid("4978807d-d07c-4603-8933-60f1198abbc3"),
                            StartedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("66937067-376a-47b3-add0-6839847a1c32"),
                            CopyId = new Guid("0ca4253f-5cd7-4179-89cb-2a54092f3d4f"),
                            ReaderId = new Guid("c958d750-b4f4-41bc-aaa2-9f81406534c0"),
                            StartedDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("b4003ad5-4684-4d55-91c4-3cb2114a2feb"),
                            CopyId = new Guid("172e3031-9d39-4447-8737-f413d7f9031a"),
                            ReaderId = new Guid("4978807d-d07c-4603-8933-60f1198abbc3"),
                            StartedDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1ccab71-6e92-47d8-99bb-823b2560ecf6"),
                            Description = "",
                            Name = "Novel",
                            Tags = ""
                        },
                        new
                        {
                            Id = new Guid("cde2affa-c16b-442a-8c0f-10b2d6b509c2"),
                            Description = "",
                            Name = "Other",
                            Tags = ""
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Copy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<int>("CopyNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsLost")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastInspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShelfNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Copies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab49f46b-8f17-4a02-81fb-5a652d12e4aa"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("f34097e4-661e-4f9c-bdfe-779aeb8d015a"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("5a529b05-cb46-4eb1-ac5e-658642577afc"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("f34097e4-661e-4f9c-bdfe-779aeb8d015a"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("a4e0e85d-1481-4911-93b7-464bbc2d835a"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("2f5464b2-372c-4b66-9532-a53b6c237ed7"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("0ca4253f-5cd7-4179-89cb-2a54092f3d4f"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("2f5464b2-372c-4b66-9532-a53b6c237ed7"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("172e3031-9d39-4447-8737-f413d7f9031a"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("5ea7045e-1803-4c3f-bf63-c114944efef2"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("a1724bb1-0898-402d-a7ff-e4dbaeea272e"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("5ea7045e-1803-4c3f-bf63-c114944efef2"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("2f021cca-85a1-4682-995c-b700f20254cb"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("9d2e7356-11db-4d1b-a675-0a93589cd5bc"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("bfec77d8-fd53-42e7-a7ec-64ab04804f99"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("51588acb-2b57-42d1-a671-db18f4e80ffc"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("e617f861-15e9-45bd-a620-509f251d486e"),
                            AcquisitionDate = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("51588acb-2b57-42d1-a671-db18f4e80ffc"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Reader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BannedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c958d750-b4f4-41bc-aaa2-9f81406534c0"),
                            CardNumber = "000-111-222",
                            Email = "jan.kowalski@mail.com",
                            FirstName = "Jan",
                            IsBanned = false,
                            LastName = "Kowalski",
                            Phone = "+48 661 727 091"
                        },
                        new
                        {
                            Id = new Guid("4978807d-d07c-4603-8933-60f1198abbc3"),
                            CardNumber = "333-444-555",
                            Email = "adam.nowak@mail.com",
                            FirstName = "Adam",
                            IsBanned = false,
                            LastName = "Nowak",
                            Phone = "+48 664 227 191"
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ae21440-948c-407a-9ab3-75c495b04285"),
                            Firstname = "",
                            Lastname = "",
                            PasswordHash = "$2a$11$S0WA.4wPVQlFIlrz7vi/r.kP1xNUGtDEoMRw367K7u/NDSF3AjEly",
                            RefreshToken = "",
                            RefreshTokenExpiration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("c4f0765c-ee9b-4e6f-9a5a-e1f494a5d0f1"),
                            Firstname = "",
                            Lastname = "",
                            PasswordHash = "$2a$11$p8jWjqbZOwff4Vc05EcdkuItXmlgSdGmruVWNpBPFTdaUgHohQI8q",
                            RefreshToken = "",
                            RefreshTokenExpiration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 0,
                            Username = "librarian"
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Book", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleLibrary.Domain.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Borrowing", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Copy", "Copy")
                        .WithMany("Borrowings")
                        .HasForeignKey("CopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleLibrary.Domain.Models.Reader", "Reader")
                        .WithMany("Borrowings")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Copy");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Category", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Copy", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Book", "Book")
                        .WithMany("Copies")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Book", b =>
                {
                    b.Navigation("Copies");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Category", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Copy", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Reader", b =>
                {
                    b.Navigation("Borrowings");
                });
#pragma warning restore 612, 618
        }
    }
}
