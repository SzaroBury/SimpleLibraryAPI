// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleLibrary.Infrastructure;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(LibraryEFContext))]
    [Migration("20250508084725_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("147580eb-4746-4c12-bd9c-e723cea8625a"),
                            Description = "",
                            FirstName = "N/A",
                            LastName = "N/A",
                            Tags = ""
                        },
                        new
                        {
                            Id = new Guid("688bfdcc-6daf-4b84-aeaa-91b30a9d2163"),
                            BornDate = new DateTime(1798, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            FirstName = "Adam",
                            LastName = "Mickiewicz",
                            Tags = ""
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a693ffa-46e6-495d-b56b-eab2d2381466"),
                            AuthorId = new Guid("147580eb-4746-4c12-bd9c-e723cea8625a"),
                            CategoryId = new Guid("c04310b5-2cad-407d-a786-3b709b285196"),
                            Description = "",
                            Language = 0,
                            ReleaseDate = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Some old book"
                        },
                        new
                        {
                            Id = new Guid("9fa19838-829f-454b-bca2-acf2e5a2b8e6"),
                            AuthorId = new Guid("147580eb-4746-4c12-bd9c-e723cea8625a"),
                            CategoryId = new Guid("c04310b5-2cad-407d-a786-3b709b285196"),
                            Description = "",
                            Language = 2,
                            ReleaseDate = new DateTime(1800, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Some old German book"
                        },
                        new
                        {
                            Id = new Guid("dc3c8342-6c5d-4718-9a4a-c3dbafaa64d3"),
                            AuthorId = new Guid("147580eb-4746-4c12-bd9c-e723cea8625a"),
                            CategoryId = new Guid("ba66cfda-319c-44f3-81de-d56cb4ef7ee6"),
                            Description = "",
                            Language = 3,
                            ReleaseDate = new DateTime(2010, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Some new French book"
                        },
                        new
                        {
                            Id = new Guid("57763e0a-48de-4d77-ac54-aede0d55e8e6"),
                            AuthorId = new Guid("688bfdcc-6daf-4b84-aeaa-91b30a9d2163"),
                            CategoryId = new Guid("ba66cfda-319c-44f3-81de-d56cb4ef7ee6"),
                            Description = "",
                            Language = 1,
                            ReleaseDate = new DateTime(1823, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Dziady część II"
                        },
                        new
                        {
                            Id = new Guid("d99481cf-ca76-47e9-b0a5-47bba680cd74"),
                            AuthorId = new Guid("688bfdcc-6daf-4b84-aeaa-91b30a9d2163"),
                            CategoryId = new Guid("ba66cfda-319c-44f3-81de-d56cb4ef7ee6"),
                            Description = "",
                            Language = 1,
                            ReleaseDate = new DateTime(1832, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Tags = "",
                            Title = "Dziady część III"
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Borrowing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CopyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CopyId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Borrowings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a55b0582-bef9-4e75-a0bd-ed71c15e0ac8"),
                            CopyId = new Guid("a5dc216e-fa5a-4d4f-a7a7-7b9cf61bd2d2"),
                            ReaderId = new Guid("0abe6f02-1e1e-4e23-9fa1-5185f6ef27f1"),
                            StartedDate = new DateTime(2022, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("78ab8343-ad9a-4e6f-8df3-c8cbeff698d3"),
                            CopyId = new Guid("629571f9-af0e-4d6b-8009-9b60c815b910"),
                            ReaderId = new Guid("0abe6f02-1e1e-4e23-9fa1-5185f6ef27f1"),
                            StartedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("150fcb11-65c9-4228-8ba7-2e56c22e7a02"),
                            CopyId = new Guid("b32a5443-7d4c-49c3-bc74-2950e9eb0326"),
                            ReaderId = new Guid("12c6abd4-508f-41cc-aa6c-045f53a04dd1"),
                            StartedDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00156952-b8ea-4233-9c52-62b3cc1007ed"),
                            CopyId = new Guid("20e704d6-d4ff-4ec1-b014-0119aa660f01"),
                            ReaderId = new Guid("0abe6f02-1e1e-4e23-9fa1-5185f6ef27f1"),
                            StartedDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("3ede8c05-5273-4af0-af7a-143badc70641"),
                            CopyId = new Guid("68459c51-4116-4087-bace-38e8df5b2687"),
                            ReaderId = new Guid("12c6abd4-508f-41cc-aa6c-045f53a04dd1"),
                            StartedDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c04310b5-2cad-407d-a786-3b709b285196"),
                            Description = "",
                            Name = "Novel",
                            Tags = ""
                        },
                        new
                        {
                            Id = new Guid("ba66cfda-319c-44f3-81de-d56cb4ef7ee6"),
                            Description = "",
                            Name = "Other",
                            Tags = ""
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Copy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<int>("CopyNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsLost")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastInspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShelfNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Copies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5dc216e-fa5a-4d4f-a7a7-7b9cf61bd2d2"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("0a693ffa-46e6-495d-b56b-eab2d2381466"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("629571f9-af0e-4d6b-8009-9b60c815b910"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("0a693ffa-46e6-495d-b56b-eab2d2381466"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("b32a5443-7d4c-49c3-bc74-2950e9eb0326"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("9fa19838-829f-454b-bca2-acf2e5a2b8e6"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("20e704d6-d4ff-4ec1-b014-0119aa660f01"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("9fa19838-829f-454b-bca2-acf2e5a2b8e6"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("68459c51-4116-4087-bace-38e8df5b2687"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("dc3c8342-6c5d-4718-9a4a-c3dbafaa64d3"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("55bb0ae4-4ab6-4777-9464-3f4e8cd50977"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("dc3c8342-6c5d-4718-9a4a-c3dbafaa64d3"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("465c7c03-8213-4f86-b01b-c1f259d52cd8"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("57763e0a-48de-4d77-ac54-aede0d55e8e6"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("91e36d60-378b-499c-86ed-8276f71ca6b3"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("d99481cf-ca76-47e9-b0a5-47bba680cd74"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        },
                        new
                        {
                            Id = new Guid("b1c6ae8f-7d42-4c8e-a16c-219fd218becd"),
                            AcquisitionDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            BookId = new Guid("d99481cf-ca76-47e9-b0a5-47bba680cd74"),
                            Condition = 0,
                            CopyNumber = 0,
                            IsLost = false,
                            ShelfNumber = 0
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Reader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BannedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0abe6f02-1e1e-4e23-9fa1-5185f6ef27f1"),
                            CardNumber = "000-111-222",
                            Email = "jan.kowalski@mail.com",
                            FirstName = "Jan",
                            IsBanned = false,
                            LastName = "Kowalski",
                            Phone = "+48 661 727 091"
                        },
                        new
                        {
                            Id = new Guid("12c6abd4-508f-41cc-aa6c-045f53a04dd1"),
                            CardNumber = "333-444-555",
                            Email = "adam.nowak@mail.com",
                            FirstName = "Adam",
                            IsBanned = false,
                            LastName = "Nowak",
                            Phone = "+48 664 227 191"
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56b99bd5-26a6-402e-98bf-be9c0f6b8a82"),
                            Firstname = "",
                            Lastname = "",
                            PasswordHash = "$2a$11$1B6YDOB5bkb2ceiYW7c3H.iXZckSLCic2Ycl/cetX0R2nyB02vGyq",
                            Role = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("6bbd49b9-4e1b-4a66-84fe-3555d40deeb1"),
                            Firstname = "",
                            Lastname = "",
                            PasswordHash = "$2a$11$zL4CffzqTbEmPte1O23hvOjJQfXcpoj5cO3QTHIe.Rc/oAN53/h4C",
                            Role = 0,
                            Username = "librarian"
                        });
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Book", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleLibrary.Domain.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Borrowing", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Copy", "Copy")
                        .WithMany("Borrowings")
                        .HasForeignKey("CopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleLibrary.Domain.Models.Reader", "Reader")
                        .WithMany("Borrowings")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Copy");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Category", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Copy", b =>
                {
                    b.HasOne("SimpleLibrary.Domain.Models.Book", "Book")
                        .WithMany("Copies")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Book", b =>
                {
                    b.Navigation("Copies");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Category", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Copy", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("SimpleLibrary.Domain.Models.Reader", b =>
                {
                    b.Navigation("Borrowings");
                });
#pragma warning restore 612, 618
        }
    }
}
